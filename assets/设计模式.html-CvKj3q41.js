import{_ as i,c as o,b as t,a,d as p,w as l,e as s,r as c,o as u}from"./app-DYAirNoF.js";const r="/assets/image-20211213093548479-D9jWVABo.png",d="/assets/image-20220304101532007-5atmqOfY.png",k="/assets/image-20211213104438086-BRJAzGFv.png",v="/assets/image-20211213104453830-B8gIRxDx.png",m="/assets/image-20220304105729238-6282fyKZ.png",b="/assets/image-20220304110951080-Cj3cjxck.png",g="/assets/image-20211213110442487-CG7tGRHx.png",y="/assets/image-20220304112815935-CYM51FHJ.png",h="/assets/image-20211213105214565-Cy8FvFZA.png",w="/assets/image-20211213105204327-fJdcpYiE.png",f="/assets/image-20211213105247151-DkzYeDaJ.png",j="/assets/image-20220304145139677-DOwrkLpu.png",q="/assets/image-20220304145213907-DjVAaJt1.png",S="/assets/image-20220304145234596-CuuE8NTw.png",x="/assets/image-20220304145250227-BGbpg8oB.png",I="/assets/image-20220304145313781-BppmOQUa.png",C="/assets/image-20220304145548691-DsWYQHFV.png",P="/assets/image-20220304145820707-DmKqF4Nn.png",_="/assets/image-20220304150008080-DZTEDuW_.png",F="/assets/image-20220304150116579-CVhmoxF6.png",z="/assets/image-20220304150225109-BdsYGwuh.png",D="/assets/image-20220304150313061-BoWOFjeT.png",U={};function A(T,n){const e=c("font");return u(),o("div",null,[n[34]||(n[34]=t('<h2 id="设计模式六大原则" tabindex="-1"><a class="header-anchor" href="#设计模式六大原则"><span>设计模式六大原则</span></a></h2><p><span style="background-color:yellow;">最终目的：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。</span></p><ol><li><p><strong>开放封闭原则</strong></p><p>思想：<span style="background-color:yellow;">对拓展开放，对修改关闭</span>。尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</p><p>优点：提高复用性、维护性。</p></li><li><p><strong>单一职责原则</strong></p><p>思想：<span style="background-color:yellow;">一个类只干一件事，实现类要单一</span></p><p>优点：降低类的复杂度。提高类的可读性。提高系统的可维护性。变更引起的风险降低。</p></li><li><p><strong>里氏替换原则</strong></p><p>思想：<span style="background-color:yellow;">继承必须确保超类所拥有的性质在子类中仍然成立</span>。通俗来讲就是：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>优点：通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p></li><li><p><strong>依赖倒置原则</strong></p><p>思想：<span style="background-color:yellow;">高层不应该依赖低层，面向接口编程</span></p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li><li>抽象不应该依赖于具体实现</li><li>具体实现应该依赖于抽象</li></ul><p>优点：<strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</strong></p></li><li><p><strong>接口隔离原则</strong></p><p>思想：<span style="background-color:yellow;">一个类对另一个类的依赖应该建立在最小的接口上</span>。建立单一接口，不要建立臃肿庞大的接口，接口尽量细化，同时接口中的方法尽量少。</p><p>优点：提高程序的灵活度，提高内聚，减少对外交互，使得最小的接口做最多的事情</p></li><li><p><strong>迪米特法则</strong></p><p>思想：<span style="background-color:yellow;">一个类尽量减少自己对其它对象的依赖</span>。如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。</p><p>优点：高内聚，低耦合</p></li><li><p><strong>合成复用原则</strong></p><p>思想：在软件复用时，要尽量<span style="background-color:yellow;">优先使用组合或者聚合</span>等关联关系来实现，其次才考虑使用继承关系来实现。</p></li></ol><hr><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h2><p><span style="background-color:yellow;">单例模式，顾名思义就是保证一个类只有一个实例，避免一个全局使用的类频繁创建与销毁对象实例，减少了内存开销</span>。</p><blockquote><p>实现</p></blockquote><p>大的方面可以分为 5 种：</p><ol><li>饿汉式（静态常量、静态代码块）</li><li>懒汉式（静态代码块、线程不安全、同步方法、同步代码块）</li><li>双层校验锁</li><li>静态内部类</li><li>枚举</li></ol><h3 id="饿汉式" tabindex="-1"><a class="header-anchor" href="#饿汉式"><span>饿汉式</span></a></h3><p>类加载就会导致该单实例对象被创建。</p>',11)),a("h5",null,[p(e,{color:"red"},{default:l(()=>n[0]||(n[0]=[s("饿汉式 - 方式 1（静态变量方式）")])),_:1,__:[0]})]),n[35]||(n[35]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//1. 将构造方法私有化，以防外界通过该构造方法创建多个实例</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2. 在本类内部创建对象实例</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//3. 提供一个公有的静态方法， 返回实例对象</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span>uniqueInstance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h5",null,[p(e,{color:"red"},{default:l(()=>n[1]||(n[1]=[s("饿汉式 - 方式 2（静态代码块方式）")])),_:1,__:[1]})]),n[36]||(n[36]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//1.构造器私有化，外部不能new</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//2. 本类内部创建对象实例</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UniqueInstance</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span><span class="token punctuation">{</span></span>
<span class="line">        uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//3. 提供一个公有的静态方法， 返回实例对象</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span>uniqueInstance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="懒汉式" tabindex="-1"><a class="header-anchor" href="#懒汉式"><span>懒汉式</span></a></h3><p>提供一个静态的公有方法，当使用到该方法时，才去创建实例对象。</p>`,4)),a("h5",null,[p(e,{color:"red"},{default:l(()=>n[2]||(n[2]=[s("懒汉式 - 方式 1（线程不安全）")])),_:1,__:[2]})]),n[37]||(n[37]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h5",null,[p(e,{color:"red"},{default:l(()=>n[3]||(n[3]=[s("懒汉式 - 方式 2（线程安全）：效率太低，不推荐使用")])),_:1,__:[3]})]),n[38]||(n[38]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h5",null,[p(e,{color:"red"},{default:l(()=>n[4]||(n[4]=[s("懒汉式 - 方式 3（线程不安全）")])),_:1,__:[4]})]),n[39]||(n[39]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在 <code>uniqueInstance == null</code> 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。</p><hr><h3 id="双重检测锁-推荐使用" tabindex="-1"><a class="header-anchor" href="#双重检测锁-推荐使用"><span>双重检测锁（推荐使用）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//提供一个静态的公有方法， 加入双重检查代码， 解决线程安全问题, 同时解决懒加载问题</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为什么两次 if 判断？</p></blockquote><p><span style="background-color:yellow;">外层判断提高效率，内层判断为了防止多次实例化对象</span></p><blockquote><p>为什么加 volatile？</p></blockquote><p><span style="background-color:yellow;">使用 volatile 的目的是：避免指令重排序</span></p><p><strong>双重检查锁定的问题是：</strong></p><p>​ <code>singleton = new Singleton();</code>该语句非原子操作，实际是三个步骤：给 singleton 分配内存；调用 Singleton 的构造函数来初始化成员变量；将给 singleton 对象指向分配的内存空间（此时 singleton 才不为 null）。</p><p>​ 编译器有可能进行指令重排优化，可能分配内存并修改指针后未初始化 ，导致其它人拿到的对象就可能是个不完整的对象。举个例子，第一个线程初始化对象到一半，第二个线程来发现已经不是 null 了就直接返回了 实际上该对象此时还没有完全初始化 可能会出现这个问题。</p><hr><h3 id="静态内部类-推荐使用" tabindex="-1"><a class="header-anchor" href="#静态内部类-推荐使用"><span>静态内部类（推荐使用）</span></a></h3>`,14)),a("p",null,[n[6]||(n[6]=s("​ 静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。")),p(e,{color:"red"},{default:l(()=>n[5]||(n[5]=[s("在没有加任何锁的情况下，保证了多线程下的安全")])),_:1,__:[5]}),n[7]||(n[7]=s("，并且没有任何性能影响和空间的浪费。 这种方式不仅具有")),n[8]||(n[8]=a("strong",null,"延迟初始化",-1)),n[9]||(n[9]=s("的好处，而且由 JVM 提供了对")),n[10]||(n[10]=a("strong",null,"线程安全",-1)),n[11]||(n[11]=s("的支持，")),n[12]||(n[12]=a("strong",null,"效率较高",-1)),n[13]||(n[13]=s("。"))]),n[40]||(n[40]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//写一个静态内部类,该类中有一个静态属性 Singleton</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="枚举实现-推荐使用" tabindex="-1"><a class="header-anchor" href="#枚举实现-推荐使用"><span>枚举实现（推荐使用）</span></a></h3><p>​ 枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span>  <span class="token class-name">EnumSingleton</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//完整版</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//私有化构造函数</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个静态枚举类</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//创建一个枚举对象，该对象天生为单例</span></span>
<span class="line">        <span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//私有化枚举的构造函数</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getInstnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//对外暴露一个获取User对象的静态方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">SingletonEnum</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getInstnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),p(e,{color:"red"},{default:l(()=>n[14]||(n[14]=[s("枚举方式底层就是懒汉式写法")])),_:1,__:[14]}),n[41]||(n[41]=t('。<img src="'+r+`" alt="image-20211213093548479" style="zoom:67%;"><hr><h3 id="单例模式的优点" tabindex="-1"><a class="header-anchor" href="#单例模式的优点"><span>单例模式的优点</span></a></h3><ol><li><p>在内存中只有一个对象，节省内存空间。</p></li><li><p>避免频繁的创建销毁对象，可以提高性能。</p></li><li><p>避免对共享资源的多重占用。</p></li><li><p>可以全局访问。</p></li></ol><h3 id="单例模式的缺点" tabindex="-1"><a class="header-anchor" href="#单例模式的缺点"><span>单例模式的缺点</span></a></h3><ol><li><p><strong>扩展困难</strong>，由于 getInstance 静态函数没有办法生成子类的实例。如果要拓展，只有重写那个类。</p></li><li><p>隐式使用引起<strong>类结构不清晰</strong>。</p></li><li><p><strong>导致程序内存泄露的问题</strong>。</p></li></ol><h3 id="单例模式的适用场景" tabindex="-1"><a class="header-anchor" href="#单例模式的适用场景"><span>单例模式的适用场景</span></a></h3><ol><li><p>需要频繁实例化然后销毁的对象。</p></li><li><p>创建对象时耗时过多或者耗资源过多，但又经常用到的对象。</p></li><li><p>资源共享的情况下，避免由于资源操作时导致的性能或损耗等。</p></li><li><p>控制资源的情况下，方便资源之间的互相通信。</p></li></ol><h3 id="单例模式注意事项" tabindex="-1"><a class="header-anchor" href="#单例模式注意事项"><span>单例模式注意事项</span></a></h3><ol><li><p>只能使用单例类提供的方法得到单例对象，<strong>不要使用反射</strong>，否则将会实例化一个新对象。</p></li><li><p><strong>不要做断开单例类对象与类中静态引用的危险操作。</strong></p></li><li><p><strong>多线程使用单例使用共享资源时，注意线程安全问题。</strong></p></li></ol><h3 id="单例模式常见问题" tabindex="-1"><a class="header-anchor" href="#单例模式常见问题"><span>单例模式常见问题</span></a></h3><ol><li><p><strong>单例模式的对象长时间不用会被 jvm 垃圾收集器收集吗？</strong></p><p><span style="color:red;"><strong>除非人为地断开单例中静态引用到单例对象的连接，否则 jvm 垃圾收集器是不会回收单例对象的。</strong></span></p><p>jvm 卸载类的判定条件如下：</p><ul><li>该类所有的实例都已经被回收，也就是 java 堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>只有三个条件都满足，jvm 才会在垃圾收集的时候卸载类。显然，单例的类不满足条件一，因此单例类也不会被回收。</p></li><li><p><strong>在一个 jvm 中会出现多个单例吗？</strong></p><p>​ 在分布式系统、多个类加载器、以及序列化的情况下，会产生多个单例，这一点是无庸置疑的。那么在同一个 jvm 中，会不会产生单例呢？使用单例提供的 getInstance()方法只能得到同一个单例，除非是使用反射方式，将会得到新的单例。因此，在使用单例模式的时候，一定不要使用反射产生新的对象。</p></li></ol><hr><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h2><p>​ <span style="background-color:yellow;">如果创建对象时直接 new 对象，造成程序间耦合严重。在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。所以说，工厂模式最大优点是：解耦</span></p><h3 id="简单工厂模式" tabindex="-1"><a class="header-anchor" href="#简单工厂模式"><span>简单工厂模式</span></a></h3><p>​ 简单工厂把实例化的操作单独放到一个类中，这个类就称为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。要点：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节 。</p><p>​ 这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，<span style="background-color:yellow;">如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改</span>。</p><blockquote><p>实现</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Product</span> product<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// do something with the product</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SimpleFactory</span> simpleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Product</span> product <span class="token operator">=</span> simpleFactory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// do something with the product</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><span style="background-color:yellow;">不足：违反了开闭原则。</span>工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂 。</p><p><strong>应用</strong>：</p><ol><li>JDK 类库中广泛使用了简单工厂模式，如工具类 java.text.DateFormat，它用于格式化一个本地日期或者时间</li><li>Java 加密技术</li></ol><hr><h3 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式"><span>工厂方法模式</span></a></h3><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，核心工厂类不再负责产品的创建。</p><p><img src="`+d+`" alt="image-20220304101532007"></p><p>优点：用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</p><p>缺点：类的个数容易过多，增加复杂度。抽象产品只能生产一种产品，此弊端可使用抽象工厂模式解决。</p><hr><h3 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式"><span>抽象工厂模式</span></a></h3><p>​ 前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等。也就是说：<strong>工厂方法模式只考虑生产同等级的产品</strong>，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如农场里既养动物又种植物，电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><p>​ 抽象工厂模式与工厂方法模式最大的区别在于，<span style="background-color:yellow;">工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</span></p><p><span style="background-color:yellow;">定义</span>：是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><blockquote><p>模式的结构</p></blockquote><ol><li><p><strong>AbstractFactory 抽象工厂</strong>：提供了创建产品的接口，它包含多个创建产品的方法 <code>newProduct()</code>，可以创建多个不同等级的产品。</p></li><li><p><strong>ConcreterFactory 具体工厂</strong>：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</p></li><li><p><strong>AbstractProduct 抽象产品</strong>：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</p></li><li><p><strong>Product 具体产品</strong>：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是<span style="background-color:yellow;">多对一</span>的关系。</p></li></ol><blockquote><p>优点</p></blockquote><ol><li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li><li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。</li></ol><blockquote><p>缺点</p></blockquote><ol><li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</li></ol><blockquote><p>应用场景与具体应用</p></blockquote><ol><li>抽象工厂模式最早的应用是用于创建属于不同操作系统的视窗构件。如在很多软件系统中需要更换界面主题，要求界面中的按钮、文本框、背景色等一起发生改变时，可以使用抽象工厂模式进行设计。</li><li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</li><li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</li></ol><hr><h3 id="工厂模式的退化" tabindex="-1"><a class="header-anchor" href="#工厂模式的退化"><span>工厂模式的退化</span></a></h3><ul><li><p>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；</p></li><li><p>当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</p></li></ul><hr><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h2><p>给某对象提供一种代理以控制对这个对象的访问，代理对象可以扩展目标对象的功能。<span style="background-color:yellow;">静态代理类在运行前就写好，而动态代理类是在 Java 运行时动态生成。</span></p><p>在代码中，一般代理会被理解为<span style="background-color:yellow;">代码增强</span>，实际上就是在原代码逻辑前后增加一些代码逻辑，而使调用者无感知。</p><h3 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理"><span>静态代理</span></a></h3><p>​ 静态代理需要在运行之前就写好代理类，如果接口增加一个方法，目标类和代理都要实现该方法，增加代码维护复杂度，所以我们通过动态代理在运行期间动态生成业务类的代理类。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//抽象角色</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//火车站（具有卖票功能，所以需要实现SellTickets）</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainStation</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;火车站卖票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//代理角色：代售点</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyPoint</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">TrainStation</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//方法增强</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;代理点收取一些额外费用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        station<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//测试类：客户角色</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ProxyPoint</span> pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        pp<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h3><p>动态代理是一种较为高级的代理模式，它的典型应用就是<span style="background-color:yellow;">Spring AOP</span>。传统代理模式存在的问题：</p><ol><li>在传统的代理模式中，客户端通过 Proxy 调用 RealSubject 类的 request()方法，同时还在代理类中封装了其他方法(如 preRequest()和 postRequest())，可以处理一些其他问题。</li><li>如果按照这种方法使用代理模式，那么真实主题角色必须是事先已经存在的，并将其作为代理对象的内部成员属性。如果一个真实主题角色必须对应一个代理主题角色，这将导致系统中的类个数急剧增加，因此需要想办法减少系统中类的个数，此外**，如何在事先不知道真实主题角色的情况下使用代理主题角色，这都是动态代理需要解决的问题。**</li></ol><p>JDK 官方提供了一个动态代理类 Proxy，它提供了一个创建代理对象的静态方法（newProxyInstance 方法）来获取代理对象。</p><img src="`+k+'" alt="image-20211213104438086" style="zoom:80%;"><p><img src="'+v+`" alt="image-20211213104453830"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//客户角色，测试</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//获取代理对象</span></span>
<span class="line">    <span class="token class-name">ProxyFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">SellTickets</span> proxyObject <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    proxyObject<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="cglib-代理" tabindex="-1"><a class="header-anchor" href="#cglib-代理"><span>CGLIB 代理</span></a></h4>`,71)),a("p",null,[n[16]||(n[16]=s("静态代理和动态代理中，目标类和代理类都实现了同样的接口。")),p(e,{color:"red"},{default:l(()=>n[15]||(n[15]=[s("如果没有定义接口，只定义了目标类，很显然无法使用动态代理，因为 JDK 动态代理要求必须定义接口，对接口进行代理")])),_:1,__:[15]}),n[17]||(n[17]=s("。"))]),n[42]||(n[42]=t('<p>CGLIB 是第三方提供的包，它为没有实现接口的类提供代理，为 JDK 动态代理提供了很好的补充。</p><ul><li>CGLIB 代理类属于目标类的子类</li><li>通过代理对象调用 sell（）方法，实质执行的是 intercept（）方法</li></ul><hr><h2 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式"><span>装饰器模式</span></a></h2><p><span style="background-color:yellow;">定义</span>：指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。</p><p>装饰器模式的主要<strong>优点</strong>有：</p><ul><li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用</li><li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果</li></ul><p>主要<strong>缺点</strong>：装饰器模式会增加许多子类。</p><blockquote><p>结构</p></blockquote><ol><li>抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol><p><img src="'+m+'" alt="image-20220304105729238"></p><hr><h2 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式"><span>建造者模式</span></a></h2><p><span style="background-color:yellow;">定义</span>：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p><p><span style="background-color:yellow;">建造者（Builder）模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。</span>如果创建简单对象，通常都是使用工厂模式进行创建，而如果创建复杂对象，就可以考虑使用建造者模式。</p><p><strong>优点</strong>：</p><ol><li><p>封装性好，构建和表示分离，客户端不必知道产品内部组成的细节</p></li><li><p>扩展性好，各个具体的建造者相互独立，有利于系统的解耦</p></li></ol><blockquote><p>结构</p></blockquote><ul><li>多产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。</li><li>抽象建造者（Builder）：包含创建产品各个子部件的抽象方法的接口，还包含一个返回产品方法 <code>getResult()</code>。</li><li>具体建造者（Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。</li><li>指挥者（Director）：调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</li></ul><p><img src="http://c.biancheng.net/uploads/allimg/181114/3-1Q1141H553419.gif" alt="客厅装修的结构图"></p><blockquote><p>应用</p></blockquote><ol><li><strong>KFC 套餐</strong>：建造者模式可以用于描述 KFC 如何创建套餐：套餐是一个复杂对象，它一般包含主食（如汉堡、鸡肉卷等）和饮料（如果汁、 可乐等）等组成部分，不同的套餐有不同的组成部分，而 KFC 的服务员可以根据顾客的要求，一步一步装配这些组成部分，构造一份完整的套餐，然后返回给顾客。</li><li>在很多游戏软件中，地图包括天空、地面、背景等组成部分，人物角色包括人体、服装、装备等组成部分，可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物。</li><li><a href="http://c.biancheng.net/view/1354.html" target="_blank" rel="noopener noreferrer">建造者模式应用实例</a></li></ol><hr><h2 id="模板方法模式" tabindex="-1"><a class="header-anchor" href="#模板方法模式"><span>模板方法模式</span></a></h2><p>​ 在面向对象程序设计过程中，常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。例如：去银行办理业务一般要经过以下 3 个流程：取号、排队、办理具体业务，其中取号、排队对每个客户是一样的，可以在父类中实现，提高代码复用性，但办理具体业务因人而异，可能是存款、取款或转账，可以延迟到子类中实现。</p><p><span style="background-color:yellow;">定义</span>：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。</p><blockquote><p>结构</p></blockquote><ul><li><p>抽象类/抽象模板：负责给出一个算法的轮廓和骨架，它由一个模板方法和若干个基本方法构成。</p><ul><li>模板方法：定义算法骨架，按某种顺序调用其包含的基本方法。</li><li>基本方法：是整个算法中的一个步骤，包含以下几种类型： <ol><li>抽象方法：在抽象类中声明，由具体子类实现。比如办理具体业务。</li><li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。比如取号、排队。</li><li>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</li></ol></li></ul></li><li><p>具体子类/具体实现：</p><p>​ 实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。</p></li></ul><p><img src="'+b+'" alt="image-20220304110951080"></p><blockquote><p>JDK 源码解析</p></blockquote><p>InputStream 类就使用了模板方法模式。在 InputStream 类中定义了多个<code>read()</code>方法，如下：</p><p><img src="'+g+'" alt="image-20211213110442487"></p><p>​ 在 InputStream 父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节，并将其存储到数组的第一个索引位置，读取 len 个字节数据。具体如何读取一个字节数据呢？由子类实现。如：FileInputStream 中实现了 read( ) 方法。</p><hr><h2 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span>策略模式</span></a></h2><p>​ 该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><p>优点：</p><ol><li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if...else 语句、switch...case 语句。</li></ol><p>缺点：</p><ol><li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li><li>策略模式造成很多的策略类，增加维护难度。</li></ol><blockquote><p>结构</p></blockquote><ol><li>抽象策略（Strategy）类：定义了一个<strong>公共接口</strong>，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li><li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li></ol><p><img src="'+y+'" alt="image-20220304112815935"></p><h3 id="策略模式在-jdk-中的应用" tabindex="-1"><a class="header-anchor" href="#策略模式在-jdk-中的应用"><span>策略模式在 JDK 中的应用</span></a></h3><blockquote><p>线程池中的拒绝策略</p></blockquote><p>​ 线程池的构造中有一个拒绝策略参数，默认是默认拒绝策略。其实这就是一个策略接口，可以在创建线程池的时候，传入不同的拒绝策略。</p><blockquote><p>比较器</p></blockquote><p>​ JDK 中大量使用了 Comparator 这个策略接口。集合排序我们比较熟悉的了，不同的排序规则其实就是不同的策略。这个策略模式使用了函数式编程接口，比较规则使用匿名内部类或者 Lambda 表达式就搞定了，不需要每个规则定义一个实现类，这样就大量省略策略类了。</p><hr><h2 id="外观模式" tabindex="-1"><a class="header-anchor" href="#外观模式"><span>外观模式</span></a></h2><p>​ 在现实生活中，常常存在办事较复杂的例子，如办房产证或注册一家公司，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。软件设计也是这样，当一个系统的功能越来越强，子系统会越来越多，客户对系统的访问也变得越来越复杂。这时如果系统内部发生改变，客户端也要跟着改变，这违背了“开闭原则”，也违背了“迪米特法则”，所以有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度，这就是外观模式的目标。</p><p>​ 外观模式是“迪米特法则”的典型应用，现阶段各种第三方 SDK、开源类库，很大概率都会使用外观模式。</p><blockquote><p>定义</p></blockquote><p>​ 又叫作<span style="background-color:yellow;">门面模式</span>，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><blockquote><p>结构</p></blockquote><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li><li>客户（Client）角色：通过一个外观角色访问各个子系统的功能。</li></ul><p><img src="'+h+'" alt="image-20211213105214565"></p><blockquote><p>优点</p></blockquote><ol><li><p>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问</p></li><li><p>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性</p></li></ol><blockquote><p>源码解析</p></blockquote><p>​ 使用 Tomcat 作为 web 容器时，当接收到浏览器发送过来的请求，Tomcat 会将请求信息封装成 ServletRequest 对象，ServletRequest 是一个接口，它还有一个子接口 HttpServletRequest，而我们知道该 request 对象肯定是一个 HttpServletRequest 对象的子实现类对象，实际上输出这个 request 对象发现是一个名为 RequestFacade 的类的对象。</p><p><img src="'+w+'" alt="image-20211213105204327"></p><hr><h2 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h2><blockquote><p>用于减少创建对象的数量，重用现有的同类对象，如果未找到匹配的对象，则创建新对象</p></blockquote><p><strong>关键代码</strong></p><p>用 HashMap 存储这些对象，取值时如果 key = null，则新建对象；如果 key != null，说明集合中有，直接返回集合中的对象</p><p><strong>应用场景</strong></p><p>池技术：String 常量池、数据库连接池、缓冲池</p><p>如：我们每次创建字符串对象时，都需要创建一个新的字符串对象的话，内存开销会很大，所以如果第一次创建了字符串对象 “devilzcl”，下次再创建相同的字符串 “devilzcl” 时，只是把它的引用指向 “devilzcl”，这样就实现了 “devilzcl” 字符串在内存中的共享。</p><p><img src="'+f+'" alt="image-20211213105247151"></p><hr><h2 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span>适配器模式</span></a></h2><p>两个不兼容的接口之间的桥梁，将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能够一起工作。</p>',74)),a("p",null,[n[20]||(n[20]=s("适配器模式分为：")),p(e,{color:"red"},{default:l(()=>n[18]||(n[18]=[s("类适配器模式")])),_:1,__:[18]}),n[21]||(n[21]=s(" & ")),p(e,{color:"red"},{default:l(()=>n[19]||(n[19]=[s("对象适配器模式")])),_:1,__:[19]}),n[22]||(n[22]=s("，类适配器模式耦合度高，所以应用较少。它们两者都要定义一个适配器类来实现当前系统的业务接口，不同点在于："))]),a("ul",null,[a("li",null,[n[24]||(n[24]=s("类适配器模式是")),p(e,{color:"green"},{default:l(()=>n[23]||(n[23]=[s("继承")])),_:1,__:[23]}),n[25]||(n[25]=s("现有组件库中已经存在的组件"))]),a("li",null,[n[27]||(n[27]=s("对象适配器模式是将现有组件库中已经实现的组件")),p(e,{color:"green"},{default:l(()=>n[26]||(n[26]=[s("引入")])),_:1,__:[26]}),n[28]||(n[28]=s("适配器类中"))])]),n[43]||(n[43]=a("blockquote",null,[a("p",null,"适配器模式中包含的角色及其职责")],-1)),a("ul",null,[n[32]||(n[32]=a("li",null,"目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口",-1)),n[33]||(n[33]=a("li",null,"适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口",-1)),a("li",null,[n[30]||(n[30]=s("适配器（Adapter）类：它是一个转换器，通过")),p(e,{color:"red"},{default:l(()=>n[29]||(n[29]=[s("继承或引用适配者的对象")])),_:1,__:[29]}),n[31]||(n[31]=s("，把适配者接口转换成目标接口"))])]),n[44]||(n[44]=t('<blockquote><p>应用场景</p></blockquote><ol><li><p>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致</p></li><li><p>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同</p></li></ol><hr><h1 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h1><h2 id="事物" tabindex="-1"><a class="header-anchor" href="#事物"><span>事物</span></a></h2><p>​ <span style="background-color:yellow;">事物是抽象化的最终结果，分为结构事物、行为事物、分组事物和注释事物。</span></p><ol><li>结构事物</li></ol><p><img src="'+j+'" alt="image-20220304145139677"></p><ol start="2"><li><p>行为事务</p><p><img src="'+q+'" alt="image-20220304145213907"></p></li><li><p>分组事物</p><p><img src="'+S+'" alt="image-20220304145234596"></p></li><li><p>注释事物</p><p><img src="'+x+'" alt="image-20220304145250227"></p></li></ol><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h2><p>​ UML2.0 一共有 13 种图（UML1.5 定义了 9 种，UML2.0 增加了 4 种），分别是类图、对象图、构件图、部署图、活动图、状态图、用例图、时序图、协作图 9 种，以及包图、组合结构图、时间图、交互概览图 4 种。</p><p><img src="'+I+'" alt="image-20220304145313781"></p><h2 id="类间关系" tabindex="-1"><a class="header-anchor" href="#类间关系"><span>类间关系</span></a></h2><p>​ UML 将事物之间的联系归纳为 6 种，并用对应的图形类表示。下面根据类与类之间的耦合度从弱到强排列。UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。</p><h3 id="_1-依赖关系-dependency" tabindex="-1"><a class="header-anchor" href="#_1-依赖关系-dependency"><span>1.依赖关系（Dependency）</span></a></h3><p>​ 依赖关系是一种使用关系，它是对象之间<span style="background-color:yellow;">耦合度最弱</span>的一种关联方式，是临时性的关联。在代码中，<strong>某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法</strong>来完成一些职责。</p><p>​ 依赖关系使用<span style="background-color:yellow;">带箭头的虚线</span>来表示，箭头从使用类指向被依赖的类。</p><p><img src="'+C+'" alt="image-20220304145548691"></p><h3 id="_2-关联关系-association" tabindex="-1"><a class="header-anchor" href="#_2-关联关系-association"><span>2.关联关系（Association）</span></a></h3><p>​ 关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。</p><p>​ 关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的<span style="background-color:yellow;">实线</span>来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。</p><p>​ 在代码中通常<strong>将一个类的对象作为另一个类的成员变量来实现关联关系</strong>。如下是老师和学生的关系图，每个老师可以教多个学生，每个学生也可向多个老师学，他们是双向关联。</p><p><img src="'+P+'" alt="image-20220304145820707"></p><h3 id="_3-聚合关系-aggregation" tabindex="-1"><a class="header-anchor" href="#_3-聚合关系-aggregation"><span>3.聚合关系（Aggregation）</span></a></h3><p>​ 聚合关系是关联关系的一种，是强关联关系，是<span style="background-color:yellow;">整体和部分之间的关系</span>，是 has-a 的关系。聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>​ 在 UML 类图中，聚合关系可以用<span style="background-color:yellow;">带空心菱形的实线</span>来表示，菱形指向整体。</p><p><img src="'+_+'" alt="image-20220304150008080"></p><h3 id="_4-组合关系-composition" tabindex="-1"><a class="header-anchor" href="#_4-组合关系-composition"><span>4.组合关系（Composition）</span></a></h3><p>​ 组合关系也是关联关系的一种，<span style="background-color:yellow;">也表示类之间的整体与部分的关系</span>，但它是一种更强烈的聚合关系，是 contains-a 关系。在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>​ 在 UML 类图中，组合关系用<span style="background-color:yellow;">带实心菱形的实线</span>来表示，菱形指向整体。</p><p><img src="'+F+'" alt="image-20220304150116579"></p><h3 id="_5-泛化关系-generalization" tabindex="-1"><a class="header-anchor" href="#_5-泛化关系-generalization"><span>5.泛化关系（Generalization）</span></a></h3><p>​ 泛化关系是对象之间耦合度最大的一种关系，表示<span style="background-color:yellow;">一般与特殊的关系</span>，是<span style="background-color:yellow;">父类与子类之间的关系</span>，是一种<span style="background-color:yellow;">继承</span>关系，是 is-a 的关系。</p><p>​ 在 UML 类图中，泛化关系用<span style="background-color:yellow;">带空心三角箭头的实线</span>来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下所示。</p><p><img src="'+z+'" alt="image-20220304150225109"></p><h3 id="_6-实现关系-realization" tabindex="-1"><a class="header-anchor" href="#_6-实现关系-realization"><span>6.实现关系（Realization）</span></a></h3><p>​ 实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>​ 在 UML 类图中，实现关系使用<span style="background-color:yellow;">带空心三角箭头的虚线</span>来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如下所示。</p><p><img src="'+D+'" alt="image-20220304150313061"></p>',39))])}const N=i(U,[["render",A]]),B=JSON.parse('{"path":"/javainterviewexp/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"设计模式","description":"设计模式","sidebar":"heading"},"headers":[{"level":2,"title":"设计模式六大原则","slug":"设计模式六大原则","link":"#设计模式六大原则","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[{"level":3,"title":"饿汉式","slug":"饿汉式","link":"#饿汉式","children":[]},{"level":3,"title":"懒汉式","slug":"懒汉式","link":"#懒汉式","children":[]},{"level":3,"title":"双重检测锁（推荐使用）","slug":"双重检测锁-推荐使用","link":"#双重检测锁-推荐使用","children":[]},{"level":3,"title":"静态内部类（推荐使用）","slug":"静态内部类-推荐使用","link":"#静态内部类-推荐使用","children":[]},{"level":3,"title":"枚举实现（推荐使用）","slug":"枚举实现-推荐使用","link":"#枚举实现-推荐使用","children":[]},{"level":3,"title":"单例模式的优点","slug":"单例模式的优点","link":"#单例模式的优点","children":[]},{"level":3,"title":"单例模式的缺点","slug":"单例模式的缺点","link":"#单例模式的缺点","children":[]},{"level":3,"title":"单例模式的适用场景","slug":"单例模式的适用场景","link":"#单例模式的适用场景","children":[]},{"level":3,"title":"单例模式注意事项","slug":"单例模式注意事项","link":"#单例模式注意事项","children":[]},{"level":3,"title":"单例模式常见问题","slug":"单例模式常见问题","link":"#单例模式常见问题","children":[]}]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[{"level":3,"title":"简单工厂模式","slug":"简单工厂模式","link":"#简单工厂模式","children":[]},{"level":3,"title":"工厂方法模式","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":3,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":3,"title":"工厂模式的退化","slug":"工厂模式的退化","link":"#工厂模式的退化","children":[]}]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[{"level":3,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":3,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]}]},{"level":2,"title":"装饰器模式","slug":"装饰器模式","link":"#装饰器模式","children":[]},{"level":2,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[]},{"level":2,"title":"模板方法模式","slug":"模板方法模式","link":"#模板方法模式","children":[]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[{"level":3,"title":"策略模式在 JDK 中的应用","slug":"策略模式在-jdk-中的应用","link":"#策略模式在-jdk-中的应用","children":[]}]},{"level":2,"title":"外观模式","slug":"外观模式","link":"#外观模式","children":[]},{"level":2,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":2,"title":"事物","slug":"事物","link":"#事物","children":[]},{"level":2,"title":"图","slug":"图","link":"#图","children":[]},{"level":2,"title":"类间关系","slug":"类间关系","link":"#类间关系","children":[{"level":3,"title":"1.依赖关系（Dependency）","slug":"_1-依赖关系-dependency","link":"#_1-依赖关系-dependency","children":[]},{"level":3,"title":"2.关联关系（Association）","slug":"_2-关联关系-association","link":"#_2-关联关系-association","children":[]},{"level":3,"title":"3.聚合关系（Aggregation）","slug":"_3-聚合关系-aggregation","link":"#_3-聚合关系-aggregation","children":[]},{"level":3,"title":"4.组合关系（Composition）","slug":"_4-组合关系-composition","link":"#_4-组合关系-composition","children":[]},{"level":3,"title":"5.泛化关系（Generalization）","slug":"_5-泛化关系-generalization","link":"#_5-泛化关系-generalization","children":[]},{"level":3,"title":"6.实现关系（Realization）","slug":"_6-实现关系-realization","link":"#_6-实现关系-realization","children":[]}]}],"git":{"updatedTime":1747101918000,"contributors":[{"name":"wjx","email":"610798187@qq.com","commits":3,"url":"https://github.com/wjx"},{"name":"wangjiaxuan","email":"610798187@qq.com","commits":2,"url":"https://github.com/wangjiaxuan"}]},"filePathRelative":"javainterviewexp/设计模式.md","excerpt":"<h2>设计模式六大原则</h2>\\n<p><span style=\\"background-color: yellow\\">最终目的：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。</span></p>\\n<ol>\\n<li>\\n<p><strong>开放封闭原则</strong></p>\\n<p>思想：<span style=\\"background-color: yellow\\">对拓展开放，对修改关闭</span>。尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</p>\\n<p>优点：提高复用性、维护性。</p>\\n</li>\\n<li>\\n<p><strong>单一职责原则</strong></p>\\n<p>思想：<span style=\\"background-color: yellow\\">一个类只干一件事，实现类要单一</span></p>\\n<p>优点：降低类的复杂度。提高类的可读性。提高系统的可维护性。变更引起的风险降低。</p>\\n</li>\\n<li>\\n<p><strong>里氏替换原则</strong></p>\\n<p>思想：<span style=\\"background-color: yellow\\">继承必须确保超类所拥有的性质在子类中仍然成立</span>。通俗来讲就是：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>\\n<p>优点：通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p>\\n</li>\\n<li>\\n<p><strong>依赖倒置原则</strong></p>\\n<p>思想：<span style=\\"background-color: yellow\\">高层不应该依赖低层，面向接口编程</span></p>\\n<ul>\\n<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li>\\n<li>抽象不应该依赖于具体实现</li>\\n<li>具体实现应该依赖于抽象</li>\\n</ul>\\n<p>优点：<strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</strong></p>\\n</li>\\n<li>\\n<p><strong>接口隔离原则</strong></p>\\n<p>思想：<span style=\\"background-color: yellow\\">一个类对另一个类的依赖应该建立在最小的接口上</span>。建立单一接口，不要建立臃肿庞大的接口，接口尽量细化，同时接口中的方法尽量少。</p>\\n<p>优点：提高程序的灵活度，提高内聚，减少对外交互，使得最小的接口做最多的事情</p>\\n</li>\\n<li>\\n<p><strong>迪米特法则</strong></p>\\n<p>思想：<span style=\\"background-color: yellow\\">一个类尽量减少自己对其它对象的依赖</span>。如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。</p>\\n<p>优点：高内聚，低耦合</p>\\n</li>\\n<li>\\n<p><strong>合成复用原则</strong></p>\\n<p>思想：在软件复用时，要尽量<span style=\\"background-color: yellow\\">优先使用组合或者聚合</span>等关联关系来实现，其次才考虑使用继承关系来实现。</p>\\n</li>\\n</ol>"}');export{N as comp,B as data};
