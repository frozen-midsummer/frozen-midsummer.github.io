import{_ as t,c as i,b as n,a as l,e,d as o,w as r,r as c,o as p}from"./app-DYAirNoF.js";const d="/assets/image-DSUHy2vi.png",u={};function h(g,s){const a=c("RouteLink");return p(),i("div",null,[s[2]||(s[2]=n('<h2 id="_0-intro" tabindex="-1"><a class="header-anchor" href="#_0-intro"><span>0 intro</span></a></h2><p>对于这一工作中最常用的版本管理工具，总是一边学一边用。现在觉得还是要懂一些复杂指令</p><p>git 的四个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository 或 Git Directory)、git 仓库(Remote Directory)，文件在这四个区域之间的转换关系如下： <img src="'+d+'" alt="alt text"></p><h2 id="_1-github" tabindex="-1"><a class="header-anchor" href="#_1-github"><span>1 Github</span></a></h2><h3 id="建立电脑和-github-之间的-ssh-连接" tabindex="-1"><a class="header-anchor" href="#建立电脑和-github-之间的-ssh-连接"><span>建立电脑和 github 之间的 ssh 连接</span></a></h3>',5)),l("p",null,[s[1]||(s[1]=e("见")),o(a,{to:"/websiteconstruction/githubpages/#_2-github-push-%E4%B8%8D%E4%B8%8A%E5%8E%BB%E7%9A%84%E9%97%AE%E9%A2%98"},{default:r(()=>s[0]||(s[0]=[e("网站建设 > Github Pages")])),_:1,__:[0]})]),s[3]||(s[3]=n(`<h3 id="ssh-connect-to-host-github-com-port-22-connection-refused" tabindex="-1"><a class="header-anchor" href="#ssh-connect-to-host-github-com-port-22-connection-refused"><span>ssh: connect to host github.com port 22: Connection refused</span></a></h3><p>这个问题是因为使用 ssh 连接 github 时，由于 github.com 的域名被污染（因为科学上网等原因），解决方案如下：</p><ol><li>修改 C:\\Windows\\System32\\drivers\\etc\\hosts 文件，添加一行：<code>140.82.113.4 github.com</code></li><li>刷新 DNS 缓存：命令提示符输入以下命令<code>ipconfig /flushdns</code>，按回车键</li></ol><h2 id="_2-开发分支和主分支之间的合并" tabindex="-1"><a class="header-anchor" href="#_2-开发分支和主分支之间的合并"><span>2 开发分支和主分支之间的合并</span></a></h2><h3 id="早间操作-同步主分支到本地开发分支" tabindex="-1"><a class="header-anchor" href="#早间操作-同步主分支到本地开发分支"><span>早间操作：同步主分支到本地开发分支</span></a></h3><ol><li>​ 切换到主分支并拉取最新代码</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout dev-trunk</span>
<span class="line"><span class="token function">git</span> pull origin dev-trunk     <span class="token comment"># 拉取远端最新 dev-trunk</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>切回开发分支并合并主分支</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout feature-wangjx</span>
<span class="line"><span class="token function">git</span> merge dev-trunk          <span class="token comment"># 将 dev-trunk 合并到当前分支</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>​​ 处理可能的冲突</li></ol><ul><li>若存在冲突，用 git status 查看冲突文件</li><li>手动编辑文件解决冲突后标记为已解决：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>冲突文件路径<span class="token operator">&gt;</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;解决与 dev-trunk 的合并冲突&quot;</span>  <span class="token comment"># 提交冲突解决</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="晚间操作-推送开发分支并合并到主分支" tabindex="-1"><a class="header-anchor" href="#晚间操作-推送开发分支并合并到主分支"><span>晚间操作：推送开发分支并合并到主分支</span></a></h3><p>目标 ​​：将本地 feature-wangjx 的修改推送到远端，并触发向 dev-trunk 的合并</p><ol><li>​​ 提交本地开发分支的修改</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                    <span class="token comment"># 添加所有修改到暂存区</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;功能开发完成&quot;</span>  <span class="token comment"># 提交本地修改</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>​​ 推送本地分支到远端</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push origin feature-wangjx  <span class="token comment"># 推送本地分支到远端同名分支</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>​​ 发起合并请求（推荐方式）</li></ol><ul><li>通过 Git 平台（GitHub/GitLab）创建 Pull Request，将 feature-wangjx 合并到 dev-trunk</li><li>或通过命令行（需权限）：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout dev-trunk</span>
<span class="line"><span class="token function">git</span> pull origin dev-trunk      <span class="token comment"># 再次确保主分支最新</span></span>
<span class="line"><span class="token function">git</span> merge feature-wangjx       <span class="token comment"># 合并开发分支</span></span>
<span class="line"><span class="token function">git</span> push origin dev-trunk      <span class="token comment"># 推送合并后的主分支</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21))])}const b=t(u,[["render",h]]),v=JSON.parse('{"path":"/devtools/git/","title":"Git","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Git","description":"git 教程","sidebar":"heading"},"headers":[{"level":2,"title":"0 intro","slug":"_0-intro","link":"#_0-intro","children":[]},{"level":2,"title":"1 Github","slug":"_1-github","link":"#_1-github","children":[{"level":3,"title":"建立电脑和 github 之间的 ssh 连接","slug":"建立电脑和-github-之间的-ssh-连接","link":"#建立电脑和-github-之间的-ssh-连接","children":[]},{"level":3,"title":"ssh: connect to host github.com port 22: Connection refused","slug":"ssh-connect-to-host-github-com-port-22-connection-refused","link":"#ssh-connect-to-host-github-com-port-22-connection-refused","children":[]}]},{"level":2,"title":"2 开发分支和主分支之间的合并","slug":"_2-开发分支和主分支之间的合并","link":"#_2-开发分支和主分支之间的合并","children":[{"level":3,"title":"早间操作：同步主分支到本地开发分支","slug":"早间操作-同步主分支到本地开发分支","link":"#早间操作-同步主分支到本地开发分支","children":[]},{"level":3,"title":"晚间操作：推送开发分支并合并到主分支","slug":"晚间操作-推送开发分支并合并到主分支","link":"#晚间操作-推送开发分支并合并到主分支","children":[]}]}],"git":{"updatedTime":1747879878000,"contributors":[{"name":"wjx","email":"610798187@qq.com","commits":3,"url":"https://github.com/wjx"},{"name":"wangjiaxuan","email":"610798187@qq.com","commits":1,"url":"https://github.com/wangjiaxuan"}]},"filePathRelative":"devtools/git/README.md","excerpt":"<h2>0 intro</h2>\\n<p>对于这一工作中最常用的版本管理工具，总是一边学一边用。现在觉得还是要懂一些复杂指令</p>\\n<p>git 的四个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository 或 Git Directory)、git 仓库(Remote Directory)，文件在这四个区域之间的转换关系如下：\\n</p>\\n<h2>1 Github</h2>\\n<h3>建立电脑和 github 之间的 ssh 连接</h3>\\n<p>见<a href=\\"/websiteconstruction/githubpages/#_2-github-push-%E4%B8%8D%E4%B8%8A%E5%8E%BB%E7%9A%84%E9%97%AE%E9%A2%98\\" target=\\"_blank\\">网站建设 &gt; Github Pages</a></p>"}');export{b as comp,v as data};
