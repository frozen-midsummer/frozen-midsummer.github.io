import{_ as l,c as s,b as t,o as c}from"./app-DYAirNoF.js";const o={};function a(n,e){return c(),s("div",null,e[0]||(e[0]=[t('<h2 id="_1-html" tabindex="-1"><a class="header-anchor" href="#_1-html"><span>1 HTML</span></a></h2><h2 id="_2-css" tabindex="-1"><a class="header-anchor" href="#_2-css"><span>2 CSS</span></a></h2><h3 id="_2-1-less" tabindex="-1"><a class="header-anchor" href="#_2-1-less"><span>2.1 less</span></a></h3><p>less 的优点是支持嵌套，<a href="https://less.bootcss.com/" target="_blank" rel="noopener noreferrer">官网的教程</a>很简短易读，这里就不多介绍了</p><h3 id="_2-2-scoped-和-deep" tabindex="-1"><a class="header-anchor" href="#_2-2-scoped-和-deep"><span>2.2 scoped 和 :deep</span></a></h3><p>就是在 vue 文件中，<code>&lt;style&gt;</code>标签加上 scoped 变成<code>&lt;style scoped&gt;</code>，就意味着标签内的样式只对当前组件生效，不会穿透到当前组件的后代组件上去。:deep 与其作用刚好相反，选择器 selector 外面包裹一层:deep(selector)，样式就会穿透到选择器的所有后代组件，有可能会发生局部的样式污染，但不会发生全局的样式污染。</p><h3 id="bem-命名规范" tabindex="-1"><a class="header-anchor" href="#bem-命名规范"><span>BEM 命名规范</span></a></h3><h4 id="概念与用法" tabindex="-1"><a class="header-anchor" href="#概念与用法"><span>概念与用法</span></a></h4><ul><li>block（块）：可以独立使用的 HTML 元素（比如：<code>&lt;nav&gt;</code>），可以不包含 element。</li><li>element（元素）：依附于 block 的 HTML 元素，无法独立存在（比如：<code>&lt;li&gt;</code>），前面要加上双下划线<code>__</code>。</li><li>modifier（修饰符）：表示 block 或者 element 的状态和外观，前面要加上双连字符<code>--</code>。</li><li>用单连字符 - 连接单词，比如：search-form。</li><li>element 只属于 block，而不是另一个 element。错误写法：<code>block__element1__element2</code>，正确写法：<code>block__element2</code>。</li><li>使用 modifier 时，同时保留不含 modifier 的类名，比如：<code>&lt;a class=&quot;menu__link menu__link--active&quot; href=&quot;/zh-cn/&quot;&gt;</code>主页<code>&lt;/a&gt;</code>。</li></ul>',9)]))}const i=l(o,[["render",a]]),r=JSON.parse('{"path":"/htmlcss/","title":"","lang":"zh-CN","frontmatter":{"lang":"zh-CN","description":"python","sidebar":"heading"},"headers":[{"level":2,"title":"1 HTML","slug":"_1-html","link":"#_1-html","children":[]},{"level":2,"title":"2 CSS","slug":"_2-css","link":"#_2-css","children":[{"level":3,"title":"2.1 less","slug":"_2-1-less","link":"#_2-1-less","children":[]},{"level":3,"title":"2.2 scoped 和 :deep","slug":"_2-2-scoped-和-deep","link":"#_2-2-scoped-和-deep","children":[]},{"level":3,"title":"BEM 命名规范","slug":"bem-命名规范","link":"#bem-命名规范","children":[]}]}],"git":{"updatedTime":1745826947000,"contributors":[{"name":"wjx","email":"610798187@qq.com","commits":2,"url":"https://github.com/wjx"},{"name":"wangjiaxuan","email":"610798187@qq.com","commits":2,"url":"https://github.com/wangjiaxuan"}]},"filePathRelative":"htmlcss/README.md","excerpt":"<h2>1 HTML</h2>\\n<h2>2 CSS</h2>\\n<h3>2.1 less</h3>\\n<p>less 的优点是支持嵌套，<a href=\\"https://less.bootcss.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网的教程</a>很简短易读，这里就不多介绍了</p>\\n<h3>2.2 scoped 和 :deep</h3>\\n<p>就是在 vue 文件中，<code>&lt;style&gt;</code>标签加上 scoped 变成<code>&lt;style scoped&gt;</code>，就意味着标签内的样式只对当前组件生效，不会穿透到当前组件的后代组件上去。:deep 与其作用刚好相反，选择器 selector 外面包裹一层:deep(selector)，样式就会穿透到选择器的所有后代组件，有可能会发生局部的样式污染，但不会发生全局的样式污染。</p>"}');export{i as comp,r as data};
