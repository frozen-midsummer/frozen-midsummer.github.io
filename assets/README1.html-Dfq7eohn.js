import{_ as e,c as n,b as t,o as s}from"./app-DYAirNoF.js";const d={};function r(i,a){return s(),n("div",null,a[0]||(a[0]=[t(`<h2 id="_1-环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-环境搭建"><span>1 环境搭建</span></a></h2><h3 id="_1-1-conda-指令" tabindex="-1"><a class="header-anchor" href="#_1-1-conda-指令"><span>1.1 conda 指令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 激活</span></span>
<span class="line">conda activate your-envname</span>
<span class="line"><span class="token comment"># 失效</span></span>
<span class="line">conda deactivate your-envname</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-依赖库安装" tabindex="-1"><a class="header-anchor" href="#_1-2-依赖库安装"><span>1.2 依赖库安装</span></a></h3><h4 id="_1-2-1-临时指定镜像源下载依赖库" tabindex="-1"><a class="header-anchor" href="#_1-2-1-临时指定镜像源下载依赖库"><span>1.2.1 临时指定镜像源下载依赖库</span></a></h4><p>全局配置镜像源时，因为清华镜像源地址有更新，导致一直下载不动，临时使用以下指令从镜像源下载依赖库： 使用阿里云镜像源： pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com xlrd==1.2.0</p><h4 id="_1-2-2-配置全局镜像源" tabindex="-1"><a class="header-anchor" href="#_1-2-2-配置全局镜像源"><span>1.2.2 配置全局镜像源</span></a></h4><h3 id="_1-3-环境迁移" tabindex="-1"><a class="header-anchor" href="#_1-3-环境迁移"><span>1.3 环境迁移</span></a></h3><p>只需将配置好的 conda 环境(ananconda/env/XXX)整个目录复制即可</p><h2 id="_2-python-正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-python-正则表达式"><span>2 python 正则表达式</span></a></h2><h3 id="_2-1-re-match-函数" tabindex="-1"><a class="header-anchor" href="#_2-1-re-match-函数"><span>2.1 re.match 函数</span></a></h3><p>re.match 尝试从字符串的起始位置匹配一个模式，如果起始位置匹配不成功，则返回 None，用的不多</p><p>函数语法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">re<span class="token punctuation">.</span>macth<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>函数参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flag</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写。多行匹配等等。参见：<a href="#_2-3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E5%8F%AF%E9%80%89%E6%A0%87%E5%BF%97">正则表达式修饰符 - 可选标志</a></td></tr></tbody></table><p>匹配成功 re.match 方法返回一个匹配的对象，否则返回 None</p><h3 id="_2-2-re-search-函数" tabindex="-1"><a class="header-anchor" href="#_2-2-re-search-函数"><span>2.2 re.search 函数</span></a></h3><p>re.search扫描整个字符串并返回第一个成功的匹配</p><h3 id="_2-3-正则表达式修饰符-可选标志" tabindex="-1"><a class="header-anchor" href="#_2-3-正则表达式修饰符-可选标志"><span>2.3 正则表达式修饰符 - 可选标志</span></a></h3><p>注：多个标志位可通过按位 OR(|)指定。如 re.I|re.M。</p><p>部分 re module 中的函数使用以下标志位作为可选入参：</p><table><thead><tr><th>short name</th><th>long name</th><th>description</th></tr></thead><tbody><tr><td>A</td><td>ASCII</td><td>使得\\w, \\W, \\b, \\B, \\d, \\D 等字符类别匹配对应的 ASCII 字符类别（而不是默认的整个 Unicode 类别）</td></tr><tr><td>I</td><td>IGNORECASE</td><td>Perform case-insensitive matching. 忽略大小写（印刷术时期大小写字母分别放在上下抽屉）</td></tr><tr><td>L</td><td>LOCALE</td><td>使 \\w, \\W, \\b, \\B 基于当前的语言环境</td></tr><tr><td>M</td><td>MULTILINE</td><td>多行匹配，使 ^ 和 $ 能作用于行首和行尾</td></tr><tr><td>S</td><td>DOTALL</td><td>使 . 匹配包括换行在内的所有字符（还挺形象）</td></tr><tr><td>X</td><td>VERBOSE</td><td>忽略空格和注释，使正则表达式更美观</td></tr><tr><td>U</td><td>UNICODE</td><td>默认。使 \\w, \\W, \\b, \\B, \\d, \\D 等字符类别匹配整个 Unicode 字符类别</td></tr></tbody></table>`,23)]))}const c=e(d,[["render",r]]),h=JSON.parse('{"path":"/serverside/pythonlearning/README1.html","title":"Python Learning","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Python Learning","description":"Python 学习笔记","sidebar":"heading"},"headers":[{"level":2,"title":"1 环境搭建","slug":"_1-环境搭建","link":"#_1-环境搭建","children":[{"level":3,"title":"1.1 conda 指令","slug":"_1-1-conda-指令","link":"#_1-1-conda-指令","children":[]},{"level":3,"title":"1.2 依赖库安装","slug":"_1-2-依赖库安装","link":"#_1-2-依赖库安装","children":[]},{"level":3,"title":"1.3 环境迁移","slug":"_1-3-环境迁移","link":"#_1-3-环境迁移","children":[]}]},{"level":2,"title":"2 python 正则表达式","slug":"_2-python-正则表达式","link":"#_2-python-正则表达式","children":[{"level":3,"title":"2.1 re.match 函数","slug":"_2-1-re-match-函数","link":"#_2-1-re-match-函数","children":[]},{"level":3,"title":"2.2 re.search 函数","slug":"_2-2-re-search-函数","link":"#_2-2-re-search-函数","children":[]},{"level":3,"title":"2.3 正则表达式修饰符 - 可选标志","slug":"_2-3-正则表达式修饰符-可选标志","link":"#_2-3-正则表达式修饰符-可选标志","children":[]}]}],"git":{"updatedTime":1736127881000,"contributors":[{"name":"wjx","email":"610798187@qq.com","commits":4,"url":"https://github.com/wjx"}]},"filePathRelative":"serverside/pythonlearning/README1.md","excerpt":"<h2>1 环境搭建</h2>\\n<h3>1.1 conda 指令</h3>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre><code><span class=\\"line\\"><span class=\\"token comment\\"># 激活</span></span>\\n<span class=\\"line\\">conda activate your-envname</span>\\n<span class=\\"line\\"><span class=\\"token comment\\"># 失效</span></span>\\n<span class=\\"line\\">conda deactivate your-envname</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{c as comp,h as data};
